{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "secondsAgos",
          "type": "uint32[]"
        }
      ],
      "name": "observe",
      "outputs": [
        {
          "internalType": "int56[]",
          "name": "tickCumulatives",
          "type": "int56[]"
        },
        {
          "internalType": "uint160[]",
          "name": "secondsPerLiquidityCumulativeX128s",
          "type": "uint160[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        }
      ],
      "name": "snapshotCumulativesInside",
      "outputs": [
        {
          "internalType": "int56",
          "name": "tickCumulativeInside",
          "type": "int56"
        },
        {
          "internalType": "uint160",
          "name": "secondsPerLiquidityInsideX128",
          "type": "uint160"
        },
        {
          "internalType": "uint32",
          "name": "secondsInside",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "observe(uint32[])": "883bdbfd",
    "snapshotCumulativesInside(int24,int24)": "a38807f2"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@jbx-protocol/=node_modules/@jbx-protocol/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@paulrberg/=node_modules/@paulrberg/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":prb-math/=node_modules/prb-math/\"]},\"sources\":{\"node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint32[]",
              "name": "secondsAgos",
              "type": "uint32[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "observe",
          "outputs": [
            {
              "internalType": "int56[]",
              "name": "tickCumulatives",
              "type": "int56[]"
            },
            {
              "internalType": "uint160[]",
              "name": "secondsPerLiquidityCumulativeX128s",
              "type": "uint160[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "snapshotCumulativesInside",
          "outputs": [
            {
              "internalType": "int56",
              "name": "tickCumulativeInside",
              "type": "int56"
            },
            {
              "internalType": "uint160",
              "name": "secondsPerLiquidityInsideX128",
              "type": "uint160"
            },
            {
              "internalType": "uint32",
              "name": "secondsInside",
              "type": "uint32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "observe(uint32[])": {
            "details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
            "params": {
              "secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
            },
            "returns": {
              "secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
              "tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
            }
          },
          "snapshotCumulativesInside(int24,int24)": {
            "details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
            "params": {
              "tickLower": "The lower tick of the range",
              "tickUpper": "The upper tick of the range"
            },
            "returns": {
              "secondsInside": "The snapshot of seconds per liquidity for the range",
              "secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
              "tickCumulativeInside": "The snapshot of the tick accumulator for the range"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "observe(uint32[])": {
            "notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
          },
          "snapshotCumulativesInside(int24,int24)": {
            "notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@jbx-protocol/=node_modules/@jbx-protocol/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@paulrberg/=node_modules/@paulrberg/",
        ":@uniswap/=node_modules/@uniswap/",
        ":base64-sol/=node_modules/base64-sol/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":prb-math/=node_modules/prb-math/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": "IUniswapV3PoolDerivedState"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
        "keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
        "urls": [
          "bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
          "dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
        ],
        "license": "GPL-2.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
    "id": 7217,
    "exportedSymbols": {
      "IUniswapV3PoolDerivedState": [
        7216
      ]
    },
    "nodeType": "SourceUnit",
    "src": "45:2557:66",
    "nodes": [
      {
        "id": 7187,
        "nodeType": "PragmaDirective",
        "src": "45:24:66",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0"
        ]
      },
      {
        "id": 7216,
        "nodeType": "ContractDefinition",
        "src": "293:2308:66",
        "nodes": [
          {
            "id": 7201,
            "nodeType": "FunctionDefinition",
            "src": "1386:180:66",
            "nodes": [],
            "documentation": {
              "id": 7189,
              "nodeType": "StructuredDocumentation",
              "src": "336:1045:66",
              "text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
            },
            "functionSelector": "883bdbfd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "observe",
            "nameLocation": "1395:7:66",
            "parameters": {
              "id": 7193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7192,
                  "mutability": "mutable",
                  "name": "secondsAgos",
                  "nameLocation": "1421:11:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7201,
                  "src": "1403:29:66",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
                    "typeString": "uint32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 7190,
                      "name": "uint32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1403:6:66",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint32",
                        "typeString": "uint32"
                      }
                    },
                    "id": 7191,
                    "nodeType": "ArrayTypeName",
                    "src": "1403:8:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
                      "typeString": "uint32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1402:31:66"
            },
            "returnParameters": {
              "id": 7200,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7196,
                  "mutability": "mutable",
                  "name": "tickCumulatives",
                  "nameLocation": "1496:15:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7201,
                  "src": "1481:30:66",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
                    "typeString": "int56[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 7194,
                      "name": "int56",
                      "nodeType": "ElementaryTypeName",
                      "src": "1481:5:66",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int56",
                        "typeString": "int56"
                      }
                    },
                    "id": 7195,
                    "nodeType": "ArrayTypeName",
                    "src": "1481:7:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
                      "typeString": "int56[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7199,
                  "mutability": "mutable",
                  "name": "secondsPerLiquidityCumulativeX128s",
                  "nameLocation": "1530:34:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7201,
                  "src": "1513:51:66",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
                    "typeString": "uint160[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 7197,
                      "name": "uint160",
                      "nodeType": "ElementaryTypeName",
                      "src": "1513:7:66",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint160",
                        "typeString": "uint160"
                      }
                    },
                    "id": 7198,
                    "nodeType": "ArrayTypeName",
                    "src": "1513:9:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
                      "typeString": "uint160[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1480:85:66"
            },
            "scope": 7216,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 7215,
            "nodeType": "FunctionDefinition",
            "src": "2348:251:66",
            "nodes": [],
            "documentation": {
              "id": 7202,
              "nodeType": "StructuredDocumentation",
              "src": "1572:771:66",
              "text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
            },
            "functionSelector": "a38807f2",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "snapshotCumulativesInside",
            "nameLocation": "2357:25:66",
            "parameters": {
              "id": 7207,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7204,
                  "mutability": "mutable",
                  "name": "tickLower",
                  "nameLocation": "2389:9:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7215,
                  "src": "2383:15:66",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int24",
                    "typeString": "int24"
                  },
                  "typeName": {
                    "id": 7203,
                    "name": "int24",
                    "nodeType": "ElementaryTypeName",
                    "src": "2383:5:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int24",
                      "typeString": "int24"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7206,
                  "mutability": "mutable",
                  "name": "tickUpper",
                  "nameLocation": "2406:9:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7215,
                  "src": "2400:15:66",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int24",
                    "typeString": "int24"
                  },
                  "typeName": {
                    "id": 7205,
                    "name": "int24",
                    "nodeType": "ElementaryTypeName",
                    "src": "2400:5:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int24",
                      "typeString": "int24"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2382:34:66"
            },
            "returnParameters": {
              "id": 7214,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7209,
                  "mutability": "mutable",
                  "name": "tickCumulativeInside",
                  "nameLocation": "2483:20:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7215,
                  "src": "2477:26:66",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int56",
                    "typeString": "int56"
                  },
                  "typeName": {
                    "id": 7208,
                    "name": "int56",
                    "nodeType": "ElementaryTypeName",
                    "src": "2477:5:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int56",
                      "typeString": "int56"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7211,
                  "mutability": "mutable",
                  "name": "secondsPerLiquidityInsideX128",
                  "nameLocation": "2525:29:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7215,
                  "src": "2517:37:66",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint160",
                    "typeString": "uint160"
                  },
                  "typeName": {
                    "id": 7210,
                    "name": "uint160",
                    "nodeType": "ElementaryTypeName",
                    "src": "2517:7:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint160",
                      "typeString": "uint160"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7213,
                  "mutability": "mutable",
                  "name": "secondsInside",
                  "nameLocation": "2575:13:66",
                  "nodeType": "VariableDeclaration",
                  "scope": 7215,
                  "src": "2568:20:66",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 7212,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2568:6:66",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2463:135:66"
            },
            "scope": 7216,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IUniswapV3PoolDerivedState",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 7188,
          "nodeType": "StructuredDocumentation",
          "src": "71:222:66",
          "text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          7216
        ],
        "name": "IUniswapV3PoolDerivedState",
        "nameLocation": "303:26:66",
        "scope": 7217,
        "usedErrors": []
      }
    ],
    "license": "GPL-2.0-or-later"
  },
  "id": 66
}